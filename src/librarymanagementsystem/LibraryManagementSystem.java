/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarymanagementsystem;

import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import librarymanagementsystem.handler.QueryHandler;
import librarymanagementsystem.handler.DeleteHandler;
import librarymanagementsystem.handler.AddHandler;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel; 
import librarymanagementsystem.controller.FileUtils;
import librarymanagementsystem.file.DefaultFileManager;
import librarymanagementsystem.model.Book;
import librarymanagementsystem.model.Library;
import librarymanagementsystem.utils.Utils;

/**
 *
 * @author saman
 */
public class LibraryManagementSystem extends javax.swing.JFrame {
    private Library library;
    private ArrayList<Book> loadedBooks = new ArrayList<>();// List to store books

    
    /**
     * Creates new form LibraryManagementSystem
     */
    public LibraryManagementSystem() {
        initComponents();
        LocalDate date = LocalDate.now();    
        dateValue.setText(date.toString());
        // Initialize the library object
    library = new Library();

//        Date d2 = new Date(2323223232L); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewBooksTable = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addBook = new javax.swing.JButton();
        deleteBook = new javax.swing.JButton();
        loadData = new javax.swing.JButton();
        viewAllBooks = new javax.swing.JButton();
        queryBook = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        dateValue = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        generateReport = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title", "Author", "ISBN", "Genre", "Year"
            }
        ));
        viewBooksTable.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management System");
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(450, 250));
        setResizable(false);

        addBook.setText("Add Book");
        addBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookActionPerformed(evt);
            }
        });

        deleteBook.setText("Delete Book");
        deleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookActionPerformed(evt);
            }
        });

        loadData.setText("Load Data");
        loadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataActionPerformed(evt);
            }
        });

        viewAllBooks.setText("View All Books");
        viewAllBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllBooksActionPerformed(evt);
            }
        });

        queryBook.setText("Query Book");
        queryBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBookActionPerformed(evt);
            }
        });

        dateLabel.setText("Date: ");

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("Library Management System");

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\saman\\Downloads\\icons8-library-100.png")); // NOI18N

        generateReport.setText("Generate Report");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(viewAllBooks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loadData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(generateReport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                            .addGap(50, 50, 50)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(queryBook, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateLabel)
                    .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadData, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewAllBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryBook, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataActionPerformed
    String[] options = {"Original (books.txt)", "Updated (output.txt)"};
    int choice = JOptionPane.showOptionDialog(this, "Choose the file to load books from:",
            "Load Books", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
            null, options, options[0]);

    String projectDir = System.getProperty("user.dir");
    String filePath = (choice == 0) ? projectDir + "/output/books.txt" : projectDir + "/output/output.txt";

    loadedBooks.clear(); // Clear the ArrayList before loading new data

    // Read books from the selected file and add them to the ArrayList
    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        String line;
        String title = null, author = null, genre = null;
        Long isbn = null;
        int year = 0;

        while ((line = reader.readLine()) != null) {
            line = line.trim();
            if (line.isEmpty()) {
                if (title != null && author != null && isbn != null && genre != null && year != 0) {
                    Book book = new Book(title, author, isbn, genre, year);
                    loadedBooks.add(book);

                    // Reset for next book
                    title = author = genre = null;
                    isbn = null;
                    year = 0;
                }
                continue;
            }

            if (line.startsWith("Title: ")) {
                title = line.substring("Title: ".length()).trim();
            } else if (line.startsWith("Author: ")) {
                author = line.substring("Author: ".length()).trim();
            } else if (line.startsWith("ISBN: ")) {
               isbn = Long.valueOf(line.substring("ISBN: ".length()).trim());
                    if (!isValidISBN(isbn)) {
                        throw new IOException("Invalid ISBN: " + isbn);
                    }
            } else if (line.startsWith("Genre: ")) {
                genre = line.substring("Genre: ".length()).trim();
            } else if (line.startsWith("Year: ")) {
                try {
                    year = Integer.parseInt(line.substring("Year: ".length()).trim());
                } catch (NumberFormatException e) {
                    System.err.println("Error parsing year: " + e.getMessage());
                }
            }
        }

        // Add the last book if still present
        if (title != null && author != null && isbn != null && genre != null && year != 0) {
            loadedBooks.add(new Book(title, author, isbn, genre, year));
        }

        JOptionPane.showMessageDialog(this, "Books loaded successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading from file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_loadDataActionPerformed

    
    // This method validates the ISBN number
   public boolean isValidISBN(long isbn) {
    String isbnStr = Long.toString(isbn);
    return (isbnStr.length() == 10) ? isValidISBN10(isbnStr) : (isbnStr.length() == 13) && isValidISBN13(isbnStr);
}

private boolean isValidISBN10(String isbn) {
    int sum = 0;
    for (int i = 0; i < 9; i++) sum += (isbn.charAt(i) - '0') * (10 - i);
    char lastChar = isbn.charAt(9);
    sum += (lastChar == 'X') ? 10 : (lastChar - '0');
    return sum % 11 == 0;
}

private boolean isValidISBN13(String isbn) {
    int sum = 0;
    for (int i = 0; i < 12; i++) sum += (isbn.charAt(i) - '0') * (i % 2 == 0 ? 1 : 3);
    int checkDigit = (10 - sum % 10) % 10;
    return checkDigit == (isbn.charAt(12) - '0');
}


    
    private void addBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookActionPerformed
        // TODO add your handling code here:
        AddHandler addHandler = new AddHandler(library);
        addHandler.setVisible(true);
    }//GEN-LAST:event_addBookActionPerformed

    private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
        // TODO add your handling code here:
        DeleteHandler deleteHandler = new DeleteHandler();
        deleteHandler.setVisible(true);
    }//GEN-LAST:event_deleteBookActionPerformed

    private void queryBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryBookActionPerformed
        // TODO add your handling code here:
        QueryHandler queryHandler = new QueryHandler();
        queryHandler.setVisible(true);
    }//GEN-LAST:event_queryBookActionPerformed

    private void createOutputFile(String filePath) throws IOException {
    File outputFile = new File(filePath);
    if (outputFile.createNewFile()) {
        // If the file is successfully created, copy books.txt content
        String projectDir = System.getProperty("user.dir");
        String booksFilePath = projectDir + "/output/books.txt";
        
        try (BufferedReader reader = new BufferedReader(new FileReader(booksFilePath));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
            
            String line;
            while ((line = reader.readLine()) != null) {
                writer.write(line);
                writer.newLine();
            }
        }
    }
}

    
    private void viewAllBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllBooksActionPerformed
    String[] options = {"Original (books.txt)", "Updated (output.txt)"};
    int choice = JOptionPane.showOptionDialog(this, "Choose the file to view books from:",
            "View All Books", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
            null, options, options[0]);

    String projectDir = System.getProperty("user.dir");
    String filePath = (choice == 0) ? projectDir + "/output/books.txt" : projectDir + "/output/output.txt";

    // Check if output.txt exists when chosen
    if (choice == 1) {
        File outputFile = new File(filePath);
        if (!outputFile.exists()) {
            try {
                createOutputFile(projectDir + "/output/output.txt"); // Create the file if not found
                JOptionPane.showMessageDialog(this, "'output.txt' not found. A new one was created.", "File Created", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating 'output.txt': " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }

    // Create a TableModel to hold the book data
    DefaultTableModel tableModel = new DefaultTableModel();
    tableModel.addColumn("Title");
    tableModel.addColumn("Author");
    tableModel.addColumn("ISBN");
    tableModel.addColumn("Genre");
    tableModel.addColumn("Year");

    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        String line;
        String title = null, author = null,  genre = null;
        Long isbn = null;
        int year = 0;

        while ((line = reader.readLine()) != null) {
            line = line.trim();
            if (line.isEmpty()) {
                if (title != null && author != null && isbn != null && genre != null && year != 0) {
                    // Add the book details as a row to the table
                    tableModel.addRow(new Object[]{title, author, isbn, genre, year});

                    // Reset for next book
                    title = author  = genre = null;
                    isbn = null;
                    year = 0;
                }
                continue;
            }

            if (line.startsWith("Title: ")) {
                title = line.substring("Title: ".length()).trim();
            } else if (line.startsWith("Author: ")) {
                author = line.substring("Author: ".length()).trim();
            } else if (line.startsWith("ISBN: ")) {
               isbn = Long.valueOf(line.substring("ISBN: ".length()).trim());
                  
            } else if (line.startsWith("Genre: ")) {
                genre = line.substring("Genre: ".length()).trim();
            } else if (line.startsWith("Year: ")) {
                try {
                    year = Integer.parseInt(line.substring("Year: ".length()).trim());
                } catch (NumberFormatException e) {
                    System.err.println("Error parsing year: " + e.getMessage());
                }
            }
        }

        // Add the last book if still present
        if (title != null && author != null && isbn != null && genre != null && year != 0) {
            tableModel.addRow(new Object[]{title, author, isbn, genre, year});
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading from file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Create a JTable with the model and put it in a JScrollPane
    JTable bookTable = new JTable(tableModel);
    JScrollPane scrollPane = new JScrollPane(bookTable);
    scrollPane.setPreferredSize(new Dimension(600, 300));

    // Display the table in a dialog
    JOptionPane.showMessageDialog(this, scrollPane, "Books", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_viewAllBooksActionPerformed

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryManagementSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBook;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateValue;
    private javax.swing.JButton deleteBook;
    private javax.swing.JButton generateReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loadData;
    private javax.swing.JButton queryBook;
    private javax.swing.JButton viewAllBooks;
    private javax.swing.JScrollPane viewBooksTable;
    // End of variables declaration//GEN-END:variables
}
