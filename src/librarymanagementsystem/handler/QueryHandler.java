/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarymanagementsystem.handler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import librarymanagementsystem.model.Book;

/**
 *
 * @author saman
 */
public class QueryHandler extends javax.swing.JFrame {
    private List<Book> bookList;
       private JTable resultsTable;
    private DefaultTableModel tableModel;
    private JScrollPane scrollPane;
    /**
     * Creates new form DeleteHandler
     */
    public QueryHandler() {
        initComponents();
        bookList = new ArrayList<>();
       // Initially hide all text fields and labels
        titleField.setVisible(false);
        authorField.setVisible(false);
        genreComboBox.setVisible(false);
        isbnField.setVisible(false);
        titleLabel.setVisible(false);
        authorLabel.setVisible(false);
        genreLabel.setVisible(false);
        isbnLabel.setVisible(false);
        
        // Create a table model with column names
        String[] columnNames = {"Title", "Author", "ISBN", "Genre", "Year"};
          tableModel = new DefaultTableModel(columnNames, 0);
        resultsTable = new JTable(tableModel);

        // Add the table to a scroll pane
         scrollPane = new JScrollPane(resultsTable);
       
       

        // Set up event listeners for radio buttons
        titleRadioButton.addActionListener(evt -> showTextField(titleField, titleLabel));
        authorRadioButton.addActionListener(evt -> showTextField(authorField, authorLabel));
        genreRadioButton.addActionListener(evt -> showComboBox(genreComboBox, genreLabel));
        isbnRadioButton.addActionListener(evt -> showTextField(isbnField, isbnLabel));


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        queryBook = new javax.swing.JButton();
        titleField = new javax.swing.JTextField();
        authorField = new javax.swing.JTextField();
        isbnField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        isbnLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        genreComboBox = new javax.swing.JComboBox<>();
        isbnRadioButton = new javax.swing.JRadioButton();
        titleRadioButton = new javax.swing.JRadioButton();
        authorRadioButton = new javax.swing.JRadioButton();
        genreRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Book");
        setMinimumSize(new java.awt.Dimension(350, 400));
        getContentPane().setLayout(null);

        queryBook.setBackground(new java.awt.Color(153, 0, 153));
        queryBook.setForeground(new java.awt.Color(255, 255, 255));
        queryBook.setText("Query Book");
        queryBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBookActionPerformed(evt);
            }
        });
        getContentPane().add(queryBook);
        queryBook.setBounds(70, 290, 170, 40);
        getContentPane().add(titleField);
        titleField.setBounds(70, 230, 167, 30);
        getContentPane().add(authorField);
        authorField.setBounds(70, 230, 167, 30);
        getContentPane().add(isbnField);
        isbnField.setBounds(70, 230, 167, 30);

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\saman\\Downloads\\icons8-add-32.png")); // NOI18N
        jLabel1.setText("Query Books");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(80, 20, 243, 42);

        titleLabel.setText("Title:");
        getContentPane().add(titleLabel);
        titleLabel.setBounds(70, 210, 37, 16);

        authorLabel.setText("Author:");
        getContentPane().add(authorLabel);
        authorLabel.setBounds(70, 210, 49, 16);

        isbnLabel.setText("ISBN:");
        getContentPane().add(isbnLabel);
        isbnLabel.setBounds(70, 210, 37, 16);

        genreLabel.setText("Genre:");
        getContentPane().add(genreLabel);
        genreLabel.setBounds(70, 210, 37, 16);

        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Romance", "Fantasy", "Novel" }));
        getContentPane().add(genreComboBox);
        genreComboBox.setBounds(70, 230, 167, 22);

        isbnRadioButton.setText("Query by ISBN");
        getContentPane().add(isbnRadioButton);
        isbnRadioButton.setBounds(40, 170, 130, 21);

        titleRadioButton.setText("Query by Title");
        getContentPane().add(titleRadioButton);
        titleRadioButton.setBounds(40, 80, 110, 21);

        authorRadioButton.setText("Query by Author");
        getContentPane().add(authorRadioButton);
        authorRadioButton.setBounds(40, 110, 120, 21);

        genreRadioButton.setText("Query by Genre");
        getContentPane().add(genreRadioButton);
        genreRadioButton.setBounds(40, 140, 130, 21);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  private void createOutputFile(String filePath) throws IOException {
        // Implement the logic to create the output file if it does not exist
        File newFile = new File(filePath);
        if (newFile.createNewFile()) {
            // You can write initial content to the file if needed
        }
    }
    private void queryBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryBookActionPerformed
       // Prompt for file selection
        String[] options = {"Original (books.txt)", "Updated (output.txt)"};
        int choice = JOptionPane.showOptionDialog(this, "Choose the file to query books from:",
                "Query Books", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);

        String projectDir = System.getProperty("user.dir");
        String filePath = (choice == 0) ? projectDir + "/output/books.txt" : projectDir + "/output/output.txt";

        // Check if output.txt exists when chosen
        if (choice == 1) {
            File outputFile = new File(filePath);
            if (!outputFile.exists()) {
                try {
                    createOutputFile(projectDir + "/output/output.txt");
                    JOptionPane.showMessageDialog(this, "'output.txt' not found. A new one was created.", "File Created", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error creating 'output.txt': " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

          // Query logic
    StringBuilder queryReport = new StringBuilder();
    String queryType = ""; // String to store the query type
    boolean found = false;

        // Clear previous results from the table
        tableModel.setRowCount(0); 

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            StringBuilder bookDetails = new StringBuilder();

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Title:")) {
                    bookDetails.setLength(0); // Clear previous details
                    bookDetails.append(line).append("\n");
                } else if (line.startsWith("Author:") || line.startsWith("ISBN:") || line.startsWith("Genre:") || line.startsWith("Year:")) {
                    bookDetails.append(line).append("\n");
                }

                // Check if we have complete book details
                if (line.trim().isEmpty() && bookDetails.length() > 0) {
                    String[] details = bookDetails.toString().split("\n");
                    if (checkBookDetails(details)) {
                        found = true;
                        // Add book details to the table model
                        String title = details[0].replace("Title: ", "").trim();
                        String author = details[1].replace("Author: ", "").trim();
                        String isbn = details[2].replace("ISBN: ", "").trim();
                        String genre = details[3].replace("Genre: ", "").trim();
                        String year = details[4].replace("Year: ", "").trim();
                        tableModel.addRow(new Object[]{title, author, isbn, genre, year});
                        
                         // Append book details to the query report
                               queryReport.append(String.format("Title: %s\nAuthor: %s\nISBN: %s\nGenre: %s\nYear: %s\n\n", title, author, isbn, genre, year));

                    }
                }
            }

            // Handle the last book if it doesn't end with a blank line
            if (bookDetails.length() > 0 && checkBookDetails(bookDetails.toString().split("\n"))) {
                found = true;
                String[] details = bookDetails.toString().split("\n");
                String title = details[0].replace("Title: ", "").trim();
                String author = details[1].replace("Author: ", "").trim();
                String isbn = details[2].replace("ISBN: ", "").trim();
                String genre = details[3].replace("Genre: ", "").trim();
                String year = details[4].replace("Year: ", "").trim();
                tableModel.addRow(new Object[]{title, author, isbn, genre, year});
                
                 // Append book details to the query report
                              queryReport.append(String.format("Title: %s\nAuthor: %s\nISBN: %s\nGenre: %s\nYear: %s\n\n", title, author, isbn, genre, year));

            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
 if (!found) {
        JOptionPane.showMessageDialog(this, "No books found matching your query.", "No Results", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Include the query type in the report
        if (titleRadioButton.isSelected()) {
            queryType = "Query by Title: " + titleField.getText().trim();
        } else if (authorRadioButton.isSelected()) {
            queryType = "Query by Author: " + authorField.getText().trim();
        } else if (genreRadioButton.isSelected()) {
            queryType = "Query by Genre: " + genreComboBox.getSelectedItem().toString();
        } else if (isbnRadioButton.isSelected()) {
            queryType = "Query by ISBN: " + isbnField.getText().trim();
        }

        // Save the report to the report.txt
        saveQueryReport("Query Type: " + queryType + "\n" + queryReport.toString());
    }
        
        // Display the table in a dialog
    JOptionPane.showMessageDialog(this, scrollPane, "Books", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_queryBookActionPerformed

     private void saveQueryReport(String report) {
        String projectDir = System.getProperty("user.dir");
        String reportFilePath = projectDir + "/output/report.txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFilePath, true))) {
            writer.write(report);
            writer.write("\n---------------------------------\n"); // Separator for multiple queries
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving query report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

     
    private boolean checkBookDetails(String[] details) {
        // Check against the selected criteria
        if (titleRadioButton.isSelected() && details[0].equalsIgnoreCase("Title: " + titleField.getText().trim())) {
            return true;
        } else if (authorRadioButton.isSelected() && details[1].equalsIgnoreCase("Author: " + authorField.getText().trim())) {
            return true;
        } else if (genreRadioButton.isSelected() && details[3].equalsIgnoreCase("Genre: " + genreComboBox.getSelectedItem().toString())) {
            return true;
        } else if (isbnRadioButton.isSelected() && details[2].equalsIgnoreCase("ISBN: " + isbnField.getText().trim())) {
            return true;
        }
        return false;
    }

    
     private void showTextField(JTextField field, JLabel label) {
        // Hide all fields and labels
        titleField.setVisible(false);
        authorField.setVisible(false);
        genreComboBox.setVisible(false);
        isbnField.setVisible(false);

        titleLabel.setVisible(false);
        authorLabel.setVisible(false);
        genreLabel.setVisible(false);
        isbnLabel.setVisible(false);

        // Show selected field and label
        field.setVisible(true);
        label.setVisible(true);
        field.setText(""); // Clear any previous input
    }
     
       
   
        
        private void showComboBox(javax.swing.JComboBox<String> comboBox, JLabel label) {
          // Hide all fields and labels
        titleField.setVisible(false);
        authorField.setVisible(false);
        genreComboBox.setVisible(false);
        isbnField.setVisible(false);

        titleLabel.setVisible(false);
        authorLabel.setVisible(false);
        genreLabel.setVisible(false);
        isbnLabel.setVisible(false);

        // Show selected combo box and label
        comboBox.setVisible(true);
        label.setVisible(true);
        comboBox.setSelectedIndex(0);
    }

       
        
        
    // Placeholder methods for searching
    private boolean searchByTitle(String title) {
        // Implement actual search logic here
        return title.equalsIgnoreCase("Example Book");
    }

    private boolean searchByAuthor(String author) {
        // Implement actual search logic here
        return author.equalsIgnoreCase("John Doe");
    }

    private boolean searchByGenre(String genre) {
        // Implement actual search logic here
        return genre.equalsIgnoreCase("Fiction");
    }

    private boolean searchByISBN(String isbn) {
        // Implement actual search logic here
        return isbn.equals("1234567890");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryHandler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JRadioButton authorRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JRadioButton genreRadioButton;
    private javax.swing.JTextField isbnField;
    private javax.swing.JLabel isbnLabel;
    private javax.swing.JRadioButton isbnRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton queryBook;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JRadioButton titleRadioButton;
    // End of variables declaration//GEN-END:variables
}
